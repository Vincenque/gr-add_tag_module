# add_tag_module_add_tag.block.yml
id: add_tag_module_add_tag
label: Add Tag
category: '[Custom Modules]'

parameters:
- id: type
  label: Type
  dtype: enum
  options: [complex, float, int, short, byte]
  option_attributes:
      size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
          gr.sizeof_char]
- id: num_ports
  label: Number of Ports
  dtype: int
  default: 1
- id: vlen
  label: Vector Length
  dtype: int
  default: '1'
  hide: ${ 'part' if vlen == 1 else 'none' }
- id: burst
  label: Burst State
  dtype: bool
  default: 'False'
  options: ['False', 'True']
- id: number_of_samples_to_record
  label: Number Of Samples To Record
  dtype: int
  default: '0'
- id: file
  label: File name
  dtype: file_save

inputs:
- domain: stream
  dtype: ${ type }
  vlen: ${ vlen }
  multiplicity: ${ num_ports }

outputs:
- domain: stream
  dtype: ${ type }
  vlen: ${ vlen }
  multiplicity: ${ num_ports }

asserts:
- ${ vlen > 0 }

templates:
  imports: from gnuradio import add_tag_module
  make: |- 
    add_tag_module.add_tag(${type.size}*${vlen},${num_ports},${burst},${number_of_samples_to_record},${file})
    self.${id}.set_burst(${burst})
    self.${id}.set_filename(${file})
  callbacks:
  - set_burst(${burst})
  - set_filename(${file})

cpp_templates:
    includes: ['#include <gnuradio/add_tag_module/add_tag.h>']
    declarations: 'add_tag_module::add_tag::sptr ${id};'
    make: |-
        this->${id} = add_tag_module::add_tag::make(${type.size}*${vlen},${num_ports},${burst},${number_of_samples_to_record},${file});
        self->${id}.set_burst(${burst});
        self->${id}.set_filename(${file})
    callbacks:
    - set_burst(${burst})
    - set_filename(${file})

file_format: 1